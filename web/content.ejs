<style id="desktop-style" media="not all">
    #banner, #general-status, #banner-separator, #ping {
        display: none;
    }

    body {
        background-color: #222;
    }

    hr {
        filter: invert(1);
    }

    .list-group-item {
        filter: invert(1) hue-rotate(180deg) contrast(70%);
    }
</style>

<div class="container">
    <div id="banner-separator">
        <br><br>
    </div>

    <% if (outage && outage['enabled']) { %>
        <div id="general-notice" class="custom-outage alert alert-<%= outage['code'] %>">
            <p><b style="font-size: 1.5rem;"><%- outage['title'] %></b></p>
            <%- outage['description'] ?? "" %>
            <% for (let step of outage['steps']) { let date = new Date(step['date']).toUTCString().split(" ") %>
            <p><b><%- step['type'] %></b> - <%- step['message'] %><br><small style="opacity:.5;"><%= date[2] + " " + date[1] + ", " + date[4].substring(0, date[4].length - 3) + " UTC" %></small></p>
            <% } %>
        </div>
    <% } else { %>
        <div id="general-status" class="alert <%= output["total"] === 2 ? "alert-danger" : (output["total"] === 1 ? "alert-warning" : "alert-success") %>">
            <b style="font-size: 1.5rem;"><%= output["total"] === 0 ? "All systems are operating smoothly" : (output["total"] === 1 ? "Some systems are experiencing degraded performance" : "Some systems are experiencing downtime") %></b>
        </div>
    <% } %>

    <!--<div id="new-infra-maintenance2" class="alert alert-secondary">
        <details>
            <summary style="margin-bottom: 1rem;">
                <b style="font-size: 1.5rem;">Scheduled maintenance on 8 March 2024</b>
            </summary>

            <p><b>Note:</b> This maintenance might need to be postponed to a later date, potentially next week.<br><b>Times:</b> 10:00 CET - 12:03 CET</p>
            <p>Equestria.dev will be updating its German server. This will affect services such as Ponycule, Chatroom, as well as websites that are still using Equestria.dev's DNS server. We apologize for any inconvenience caused.</p>
            <div>Please refer to this status page for future information, or contact us at <a href="mailto:raindrops@equestria.dev">raindrops@equestria.dev</a>. Thank you for your understanding.</div>
        </details>
    </div>

    <div id="new-infra-maintenance" class="alert alert-secondary">
        <details>
            <summary style="margin-bottom: 1rem;">
                <b style="font-size: 1.5rem;">Scheduled maintenance on 7 March 2024</b>
            </summary>

            <p><i>This maintenance is now done and services are being started again, sorry for any inconvenience this has caused.</i></p>
            <hr>
            <p><b>Times:</b> 08:30 CET - 17:42 CET<br><b>Disclaimer:</b> Hardware issues have made a step of the maintenance take longer than expected, therefore the maintenance overall might be slightly longer. We apologize for the inconvenience.</p>
            <p>Equestria.dev is deploying its new infrastructure to production environments today. During this period, most services are taken down. It is estimated for this maintenance to take the entire day, and we apologize for the inconvenience.</p>
            <p>Please refer to this status page for future information, or contact us at <a href="mailto:raindrops@equestria.dev">raindrops@equestria.dev</a>. Thank you for your understanding.</p>
            <ul>
                <li><b>Ponycon.info users:</b> The ponycon.info website and all associated infrastructure have been transferred to a temporary server during the maintenance.</li>
                <li><b>Equestria.dev Live and Label Studio users:</b> These services will be offline for a longer period as they are not our top priority at the moment. They have also been taken down earlier to ensure a smooth transfer process.</li>
                <li><b>YouTrack users:</b> YouTrack will not be reinstated after this maintenance as it was planned to be discontinued before. Please use our <a href="https://equestria.dev" target="_blank">contact page</a> to report bugs.</li>
                <li><b>GitLab users:</b> GitLab was shut down at 21:00 CET to take a full backup, so it can easily be restored on the new server installation. Sorry for the inconvenience.</li>
            </ul>
        </details>
    </div>

    <div id="new-infra" class="alert alert-secondary">
        <details>
            <summary style="margin-bottom: 1rem;">
                <b style="font-size: 1.5rem;">Equestria.dev 2024 infrastructure</b>
            </summary>
            <div>Equestria.dev is renovating its infrastructure to prepare for more modern technologies. The following is planned:</div>
            <ul>
                <li>New naming scheme based on the names of people who participated on My Little Pony</li>
                <li>Switching to Cloudflare's DNS servers; using their proxy is not planned because of user privacy concerns</li>
                <li>Reconfiguration of the host servers with Red Hat Enterprise Linux and of the guest servers with Fedora Cloud</li>
                <li>Clean up and removal of unused DNS entries and files on servers</li>
                <li>Deployment of version 13 of the website, as well as IPv6</li>
                <li><s>Strict and unique use of IPv6 throughout Equestria.dev's internal infrastructure</s></li>
                <li>Removal and archival of Equestria.dev's YouTrack instance</li>
            </ul>
            <p>Some websites, applications, services or pages might be unavailable during this change. Please use this page to keep track of anything as it goes and be aware that Equestria.dev will always value your privacy.</p>
            <div><b>Currently deployed changes:</b> IPv6 on all websites · Cloudflare proxy on pone.eu.org · Removal of unused DNS entries · Transfer of the equestria.dev domain to Cloudflare DNS · Configuration of DNSSEC · New naming scheme · Reconfiguration of host servers · Removal of YouTrack · Deployment of version 13 of our website</div>
        </details>
    </div>-->

    <div>
        <div class="list-group">
            <% for (let group of output["groups"]) { %>
                <div class="list-group-item service list-group-item-action">
                    <div style="list-style: none;">
                        <b><%= group %></b>

                        <div class="history-90">
                            <div style="margin-top: 5px; display: grid; grid-template-columns: repeat(90, 1fr);">
                                <% let uptimes = []; for (let i = 89; i > -1; i--) {

                                    let date = new Date(new Date(new Date().toISOString().split("T")[0]).getTime() - 86400000 * i).toISOString().split("T")[0];
                                    let pretty = new Date(new Date(new Date().toISOString().split("T")[0]).getTime() - 86400000 * i).toLocaleDateString("en-US", { weekday: 'long', month: 'long', day: 'numeric' });
                                    let services = Object.values(output["services"]).filter(i => i.group === group).map(i => i.id);
                                    let list = [];

                                    for (let service of services) {
                                        if (history[service]) {
                                            if (history[service][date]) {
                                                list.push(history[service][date].reduce((a, b) => a + b) / history[service][date].length);
                                            }
                                        }
                                    }

                                    let avg = -1;

                                    if (list.length > 0) {
                                        avg = list.reduce((a, b) => a + b) / list.length;
                                        uptimes.push((Math.abs(3 - avg) / 3) * 100);
                                    }

                                    let lower = Math.floor(avg);
                                    let higher = Math.ceil(avg);
                                    let diff = Math.abs(1 - (higher - avg));

                                %>
                                <div title="<b><%= pretty %></b><br><%= (100 - (diff * 100)).toFixed(1) %>% uptime<br><% let minutesDown = Math.round(diff * 1440); let sHoursDown = Math.floor(minutesDown / 60); let sMinutesDown = minutesDown - sHoursDown * 60; %><%= sHoursDown > 0 ? `Down ${sHoursDown} hr ${sMinutesDown} min` : (sMinutesDown > 0 ? `Down ${sMinutesDown} minute${sMinutesDown > 1 ? "s" : ""}` : `No downtime`) %><br><%= (100 - (diff * 100)) >= 99 ? "Compliant with SLA" : "Violating SLA" %>" data-bs-html="true" data-bs-toggle="tooltip" style="display: flex; align-items: center; justify-content: center;">
                                    <% if (list.length === 0) { %>
                                        <div class="bg-secondary" style="height: 34px; width: 5px;"></div>
                                    <% } else { %>
                                        <div class="bg-<%= lower === 0 ? "success" : (lower === 1 ? "warning" : (lower === 2 ? "danger" : "info")) %>" style="height: 34px; width: 5px;">
                                            <div class="bg-<%= higher === 0 ? "success" : (higher === 1 ? "warning" : (higher === 2 ? "danger" : "info")) %>" style="height: 34px; width: 5px; opacity: <%= diff * 100 %>%;"></div>
                                        </div>
                                    <% } %>
                                </div>
                                <% } %>
                            </div>
                            <div style="margin-top: 5px; display: grid; grid-template-columns: max-content 1fr max-content;">
                                <small style="opacity: .5;">90 days ago</small>
                                <small style="opacity: .75; text-align: center;"><% if (uptimes.length > 0) { %><%= (uptimes.reduce((a, b) => a + b) / uptimes.length).toFixed(1) %> % uptime · <%= (uptimes.reduce((a, b) => a + b) / uptimes.length) >= 99 ? "Compliant with SLA" : "Violating SLA" %><% } %></small>
                                <small style="opacity: .5;">Today </small>
                            </div>
                        </div>

                        <div class="history-60">
                            <div style="margin-top: 5px; display: grid; grid-template-columns: repeat(60, 1fr);">
                                <% uptimes = []; for (let i = 59; i > -1; i--) {

                                    let date = new Date(new Date(new Date().toISOString().split("T")[0]).getTime() - 86400000 * i).toISOString().split("T")[0];
                                    let parts = new Date(new Date(new Date().toISOString().split("T")[0]).getTime() - 86400000 * i).toString().split(" ");
                                    let pretty = parts[0] + " " + parts[1] + " " + parts[2];
                                    let services = Object.values(output["services"]).filter(i => i.group === group).map(i => i.id);
                                    let list = [];

                                    for (let service of services) {
                                        if (history[service]) {
                                            if (history[service][date]) {
                                                list.push(history[service][date].reduce((a, b) => a + b) / history[service][date].length);
                                            }
                                        }
                                    }

                                    let avg = -1;

                                    if (list.length > 0) {
                                        avg = list.reduce((a, b) => a + b) / list.length;
                                        uptimes.push((Math.abs(3 - avg) / 3) * 100);
                                    }

                                    let lower = Math.floor(avg);
                                    let higher = Math.ceil(avg);
                                    let diff = Math.abs(1 - (higher - avg));

                                %>
                                <div title="<%= pretty %>" data-bs-toggle="tooltip" style="display: flex; align-items: center; justify-content: center;">
                                    <% if (list.length === 0) { %>
                                        <div class="bg-secondary" style="height: 34px; width: 8px;"></div>
                                    <% } else { %>
                                        <div class="bg-<%= lower === 0 ? "success" : (lower === 1 ? "warning" : (lower === 2 ? "danger" : "info")) %>" style="height: 34px; width: 8px;">
                                            <div class="bg-<%= higher === 0 ? "success" : (higher === 1 ? "warning" : (higher === 2 ? "danger" : "info")) %>" style="height: 34px; width: 8px; opacity: <%= diff * 100 %>%;"></div>
                                        </div>
                                    <% } %>
                                </div>
                                <% } %>
                            </div>
                            <div style="margin-top: 5px; display: grid; grid-template-columns: max-content 1fr max-content;">
                                <small style="opacity: .5;">60 days ago</small>
                                <small style="opacity: .75; text-align: center;"><% if (uptimes.length > 0) { %><%= (uptimes.reduce((a, b) => a + b) / uptimes.length).toFixed(1) %> % uptime<% } %></small>
                                <small style="opacity: .5;">Today </small>
                            </div>
                        </div>

                        <div class="history-30">
                            <div style="margin-top: 5px; display: grid; grid-template-columns: repeat(30, 1fr);">
                                <% uptimes = []; for (let i = 29; i > -1; i--) {

                                    let date = new Date(new Date(new Date().toISOString().split("T")[0]).getTime() - 86400000 * i).toISOString().split("T")[0];
                                    let parts = new Date(new Date(new Date().toISOString().split("T")[0]).getTime() - 86400000 * i).toString().split(" ");
                                    let pretty = parts[0] + " " + parts[1] + " " + parts[2];
                                    let services = Object.values(output["services"]).filter(i => i.group === group).map(i => i.id);
                                    let list = [];

                                    for (let service of services) {
                                        if (history[service]) {
                                            if (history[service][date]) {
                                                list.push(history[service][date].reduce((a, b) => a + b) / history[service][date].length);
                                            }
                                        }
                                    }

                                    let avg = -1;

                                    if (list.length > 0) {
                                        avg = list.reduce((a, b) => a + b) / list.length;
                                        uptimes.push((Math.abs(3 - avg) / 3) * 100);
                                    }

                                    let lower = Math.floor(avg);
                                    let higher = Math.ceil(avg);
                                    let diff = Math.abs(1 - (higher - avg));

                                %>
                                <div title="<%= pretty %>" data-bs-toggle="tooltip" style="display: flex; align-items: center; justify-content: center;">
                                    <% if (list.length === 0) { %>
                                        <div class="bg-secondary" style="height: 34px; width: 10px;"></div>
                                    <% } else { %>
                                        <div class="bg-<%= lower === 0 ? "success" : (lower === 1 ? "warning" : (lower === 2 ? "danger" : "info")) %>" style="height: 34px; width: 10px;">
                                            <div class="bg-<%= higher === 0 ? "success" : (higher === 1 ? "warning" : (higher === 2 ? "danger" : "info")) %>" style="height: 34px; width: 10px; opacity: <%= diff * 100 %>%;"></div>
                                        </div>
                                    <% } %>
                                </div>
                                <% } %>
                            </div>
                            <div style="margin-top: 5px; display: grid; grid-template-columns: max-content 1fr max-content;">
                                <small style="opacity: .5;">30 days ago</small>
                                <small style="opacity: .75; text-align: center;"><% if (uptimes.length > 0) { %><%= (uptimes.reduce((a, b) => a + b) / uptimes.length).toFixed(1) %> % uptime<% } %></small>
                                <small style="opacity: .5;">Today </small>
                            </div>
                        </div>
                    </div>
                    <% for (let index in Object.keys(output["services"])) { index = parseInt(index); let service = output["services"][Object.keys(output["services"])[index]]; if (service.group === group) { %>
                        <div style="margin: 10px 0 10px 20px;">
                            <span><%= service['name'] %></span>
                            <% if (service['status'] === "online") { %>
                                <span class="text-success" style="float: right;" data-status-code="0">Operational</span>
                            <% } %>
                            <% if (service['status'] === "maintenance") { %>
                                <span class="text-info" style="float: right;" data-status-code="3">Under Maintenance</span>
                            <% } %>
                            <% if (service['status'] === "notWorking") { %>
                                <span class="text-warning" style="float: right;" data-status-code="1">Degraded Performance</span>
                            <% } %>
                            <% if (service['status'] === "offline") { %>
                                <span class="text-danger" style="float: right;" data-status-code="2">Outage</span>
                            <% } %>
                        </div>
                    <% }} %>
                </div>
            <% } %>
        </div>

        <script>

            Array.from(document.getElementsByClassName("service")).forEach((i) => {
                let code = 0;
                let children = Array.from(i.children).filter(i => i.tagName === "DIV").map(i => Array.from(i.children).filter(i => i.className.startsWith("text-"))[0].getAttribute("data-status-code")).map(i => parseInt(i));

                if (children.includes(1)) code = 1;
                if (children.includes(2)) code = 2;
                if (children.includes(3)) code = 3;

                console.log(code);

                switch (code) {
                    case 0:
                        i.children[0].children[1].innerText = "Operational";
                        i.children[0].children[1].className = "text-success";
                        break;

                    case 1:
                        i.children[0].children[1].innerText = "Degraded Performance";
                        i.children[0].children[1].className = "text-warning";
                        break;

                    case 2:
                        i.children[0].children[1].innerText = "Outage";
                        i.children[0].children[1].className = "text-danger";
                        break;

                    case 3:
                        i.children[0].children[1].innerText = "Under Maintenance";
                        i.children[0].children[1].className = "text-info";
                        break;
                }
            });

        </script>

        <% if (maintenances && maintenances.length > 0) { %>
            <h3 style="margin-top: 50px;">Scheduled Maintenance<%= maintenances.length > 1 ? "s" : "" %></h3>
            <div class="maintenances">
                <% for (let maintenance of maintenances) { if (new Date(maintenance["end"]).getTime() >= new Date(new Date().toISOString().split("T")[0]).getTime()) %>
                <h5><%= maintenance["title"] %></h5>
                <p><%= maintenance["description"] %><br><small class="text-muted">Scheduled from <%= new Date(maintenance["start"]).toDateString().split(" ").slice(-3).join(" ") %> to <%= new Date(maintenance["end"]).toDateString().split(" ").slice(-3).join(" ") %> (estimated)</small></p>
                <% } %>
            </div>
        <% } %>

        <p class="text-muted" style="display: none;margin-top: 10px;" id="update-container-new">Last updated <span data-bs-toggle="tooltip" title="<%= date.toString() %>" id="update-date" data-update-date="<%= date.toISOString() %>"><%= date.toISOString() %></span><span id="link-refresh" style="display:none;"></span></p>
    </div>

    <script id="page-script">
        document.getElementById("ping-time").innerText = "<%= Math.round(ping) %>";

        if (location.search.includes("embed")) {
            document.getElementById("desktop-style").removeAttribute("media");
            Array.from(document.getElementsByTagName("details")).map(i => i.open = true);

            if (window.parent) {
                location.hash = "#/" + document.body.clientHeight;
            }
        }

        document.getElementById("update-date").innerText = timeAgo((new Date(document.getElementById("update-date").getAttribute("data-update-date"))).getTime());
        document.getElementById("update-date").title = (new Date(document.getElementById("update-date").getAttribute("data-update-date"))).toString();

        [...(document.querySelectorAll('[data-bs-toggle="tooltip"]'))].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl, { html: true, sanitize: false, animation: false }));

        setInterval(() => {
            document.getElementById("update-date").innerText = timeAgo((new Date(document.getElementById("update-date").getAttribute("data-update-date"))).getTime());

            if (new Date() - (new Date(document.getElementById("update-date").getAttribute("data-update-date"))).getTime() >= 360000) {
                document.getElementById("link-refresh").style.display = "inline";
            }
        }, 500);

        if (window.chart) window.chart.data = {
            labels: JSON.parse(`<%- JSON.stringify(pings[0]) %>`).map(i => new Date(i).toDateString().split(" ")[2] + " " + new Date(i).toDateString().split(" ")[1] + " " + new Date(i).toTimeString().split(" ")[0].substring(0, 5)),
            datasets: [{
                label: 'Ping',
                data: JSON.parse(`<%= JSON.stringify(pings[1]) %>`),
                borderColor: '#05b7b1',
                backgroundColor: '#05b7b177'
            }]
        }

        if (!window.chart) {
            window.chart = new Chart(document.getElementById('history').getContext('2d'), {
                type: 'line',
                data: {
                    labels: JSON.parse(`<%- JSON.stringify(pings[0]) %>`).map(i => new Date(i).toDateString().split(" ")[2] + " " + new Date(i).toDateString().split(" ")[1] + " " + new Date(i).toTimeString().split(" ")[0].substring(0, 5)),
                    datasets: [{
                        label: 'Ping',
                        data: JSON.parse(`<%= JSON.stringify(pings[1]) %>`),
                        borderColor: '#05b7b1',
                        backgroundColor: '#05b7b177'
                    }]
                },
                options: {
                    animation: {
                        duration: 0
                    },
                    scales: {
                        y: {
                            ticks: {
                                callback: function(label) {
                                    return Math.round(label) + " ms";
                                }
                            }
                        },
                        x: {
                            gridLines: {
                                display: false
                            },
                            grid: {
                                display: false
                            },
                            gridLineWidth: 0
                        }
                    },
                    elements: {
                        point:{
                            radius: 0
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(tooltipItem) {
                                    return tooltipItem.raw.toFixed(2) + ' ms';
                                }
                            },
                            intersect: false
                        }
                    }
                }
            });
        }
    </script>
</div>
