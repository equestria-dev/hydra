<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Equestria.dev Status</title>
    <link rel="stylesheet" href="/bootstrap.min.css">
    <script src="/bootstrap.min.js"></script>
    <script src="/chart.js"></script>
    <link rel="icon" href="/logo2.svg" type="image/svg+xml">
    <link rel="stylesheet" href="/style.css">
</head>
<body>
<div id="banner" class="pt-5 pb-5 text-white" style="background-color: #ddd; text-align: center; background-image: url('/background.png'); background-size: cover; background-position: center;">
    <img src="/banner2.svg" style="width: 128px; max-width: 100%;" alt="Equestria.dev">
</div>

<div id="page"></div>

<div class="container">
    <div id="ping">
        <h3 style="margin-top: 50px;">Systems Response Time (<span id="ping-time">-</span> ms)</h3>
        <canvas id="history" style="width: 100%; height: 200px; max-height: 100%;"></canvas>
    </div>

    <hr>
    <p id="update-container"></p>
</div>

<script>
    function bytesToSize(bytes) {
        if (bytes > 1024) {
            if (bytes > 1024**2) {
                if (bytes > 1024**3) {
                    if (bytes > 1024**4) {
                        return (bytes / 1024**4).toFixed(3) + " TiB";
                    } else {
                        return (bytes / 1024**3).toFixed(2) + " GiB";
                    }
                } else {
                    return (bytes / 1024**2).toFixed(1) + " MiB";
                }
            } else {
                return (bytes / 1024).toFixed(0) + " KiB";
            }
        } else {
            return bytes.toFixed(0) + " bytes";
        }
    }

    function timeAgo(time) {
        if (!isNaN(parseInt(time))) {
            time = new Date(time).getTime();
        }

        let periods = ["second", "minute", "hour", "day", "week", "month", "year", "age"];

        let lengths = ["60", "60", "24", "7", "4.35", "12", "100"];

        let now = new Date().getTime();

        let difference = Math.round((now - time) / 1000);
        let tense;
        let period;

        if (difference <= 10 && difference >= 0) {
            return "now";
        } else if (difference > 0) {
            tense = "ago";
        } else {
            tense = "later";
        }

        let j;

        for (j = 0; difference >= lengths[j] && j < lengths.length - 1; j++) {
            difference /= lengths[j];
        }

        difference = Math.round(difference);

        period = periods[j];

        return `${difference} ${period}${difference > 1 ? "s" : ""} ${tense}`;
    }

    async function updateStatusPage() {
        document.getElementById("page").innerHTML = await (await fetch("/content.html")).text();
        eval(document.getElementById("page-script").innerText);

        let html = document.getElementById("update-container-new").outerHTML;
        document.getElementById("update-container-new").outerHTML = "";
        document.getElementById("update-container").outerHTML = html;
        document.getElementById("update-container-new").id = "update-container";
        document.getElementById("update-container").style.display = "";
    }

    setInterval(updateStatusPage, 30000);
    updateStatusPage();
</script>
</body>
</html>